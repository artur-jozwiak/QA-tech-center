// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QA.DataAccess;

#nullable disable

namespace QA.DataAccess.Migrations
{
    [DbContext(typeof(QAContext))]
    partial class QAContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QA.Domain.Models.ChildParametersAssignement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChildParameterId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterOrder")
                        .HasColumnType("int");

                    b.Property<int?>("ParentParameterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildParameterId");

                    b.HasIndex("ParentParameterId");

                    b.ToTable("ChildParametersAssignement");
                });

            modelBuilder.Entity("QA.Domain.Models.CoatingModels.Coating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoatingName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CoatingSymbol")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("InternalName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("LSL")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("ProcessId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("USL")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("Id");

                    b.ToTable("Coatings");
                });

            modelBuilder.Entity("QA.Domain.Models.CoatingModels.CoatingMeasurementSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Adhesion1")
                        .HasColumnType("int");

                    b.Property<int?>("Adhesion2")
                        .HasColumnType("int");

                    b.Property<int?>("Adhesion3")
                        .HasColumnType("int");

                    b.Property<int?>("Adhesion4")
                        .HasColumnType("int");

                    b.Property<int>("CoatingProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsReferenceSample")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("NonRotatingRod")
                        .HasColumnType("bit");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Thickness1")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<decimal?>("Thickness2")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<decimal?>("Thickness3")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<decimal?>("Thickness4")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<int>("TowerNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoatingProcessId");

                    b.ToTable("CoatingMeasurementSeriess");
                });

            modelBuilder.Entity("QA.Domain.Models.CoatingModels.CoatingProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Coating")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProcessId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RunNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CoatingProcess");
                });

            modelBuilder.Entity("QA.Domain.Models.Defect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DefectCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("DefectCategoryId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("QA.Domain.Models.DefectCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DefectCategories");
                });

            modelBuilder.Entity("QA.Domain.Models.DescriptiveParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FillingMethod")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<string>("TestingInstrument")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("DescriptiveParameter");
                });

            modelBuilder.Entity("QA.Domain.Models.DevicePort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MeasuringDeviceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("MeasuringDeviceId");

                    b.ToTable("DevicePorts");
                });

            modelBuilder.Entity("QA.Domain.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComparisonPointId")
                        .HasColumnType("int");

                    b.Property<int?>("DescriptiveParameterId")
                        .HasColumnType("int");

                    b.Property<int>("Destination")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MRBId")
                        .HasColumnType("int");

                    b.Property<int?>("MarkerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ParameterId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComparisonPointId");

                    b.HasIndex("DescriptiveParameterId")
                        .IsUnique()
                        .HasFilter("[DescriptiveParameterId] IS NOT NULL");

                    b.HasIndex("MRBId");

                    b.HasIndex("MarkerId")
                        .IsUnique()
                        .HasFilter("[MarkerId] IS NOT NULL");

                    b.HasIndex("ParameterId")
                        .IsUnique()
                        .HasFilter("[ParameterId] IS NOT NULL");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("QA.Domain.Models.Keyence.KeyenceMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FileModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<int>("Series")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.HasKey("Id");

                    b.HasIndex("ParameterId");

                    b.ToTable("KeyenceMeasurements");
                });

            modelBuilder.Entity("QA.Domain.Models.Keyence.KeyenceParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("LSL")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("LowerTollerance")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Nominal")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<int>("Number")
                        .HasPrecision(3, 1)
                        .HasColumnType("int");

                    b.Property<decimal>("USL")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UpperTollerance")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.HasKey("Id");

                    b.ToTable("KeyenceParameters");
                });

            modelBuilder.Entity("QA.Domain.Models.MRB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NonConformanceDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("RootCause")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MRB");
                });

            modelBuilder.Entity("QA.Domain.Models.MRBCorrectiveAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Creator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MRBId")
                        .HasColumnType("int");

                    b.Property<string>("StaffResponsible")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MRBId");

                    b.ToTable("MRBCorrectiveActions");
                });

            modelBuilder.Entity("QA.Domain.Models.MRBInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Creator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Instruction")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("MRBId")
                        .HasColumnType("int");

                    b.Property<string>("StaffResponsible")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MRBId")
                        .IsUnique();

                    b.ToTable("MRBInstructions");
                });

            modelBuilder.Entity("QA.Domain.Models.MRBMemberSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<string>("MRBDipositions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MRBId")
                        .HasColumnType("int");

                    b.Property<string>("Member")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("NotificationReceived")
                        .HasColumnType("bit");

                    b.Property<int>("PositionInQueue")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("MRBId");

                    b.ToTable("MRBMemberSummaries");
                });

            modelBuilder.Entity("QA.Domain.Models.Marker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("VisualInspectionFormId")
                        .HasColumnType("int");

                    b.Property<decimal>("X")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Y")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("VisualInspectionFormId");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("QA.Domain.Models.Measurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("EdgeNo")
                        .HasColumnType("int");

                    b.Property<bool>("IsControllerMeasuremnt")
                        .HasColumnType("bit");

                    b.Property<int?>("MeasurementSeriesId")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("OrderKey")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementSeriesId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ParameterId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("QA.Domain.Models.MeasurementsSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("GrainSize")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PorosityClass")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PositionOnTray")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<int?>("StackNo")
                        .HasColumnType("int");

                    b.Property<string>("StorageLocation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TrayLocationId")
                        .HasColumnType("int");

                    b.Property<string>("TrayNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TrayLocationId");

                    b.ToTable("MeasurementsSeries");
                });

            modelBuilder.Entity("QA.Domain.Models.MeasuringDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CalibrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MeasuringDevices");
                });

            modelBuilder.Entity("QA.Domain.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("QA.Domain.Models.OperationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BurrRate")
                        .HasColumnType("int");

                    b.Property<string>("Cassette")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("CassetteInsertsQty")
                        .HasColumnType("int");

                    b.Property<string>("CentralTableDirection")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("CentralTableRPM")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("Feed")
                        .HasColumnType("int");

                    b.Property<decimal?>("GunsPitch")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<int?>("HeadsQty")
                        .HasMaxLength(150)
                        .HasColumnType("int");

                    b.Property<string>("LowerDirection")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("LowerRPM")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NoBlastingBetweenRows")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoOfPasses")
                        .HasColumnType("int");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<string>("OrderKey")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("PressureLeft")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("PressureRight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ProcessTray")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Program")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SandblastingHeight")
                        .HasColumnType("int");

                    b.Property<string>("ScanningMode")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UpperDirection")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("UpperRPM")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationDetails");
                });

            modelBuilder.Entity("QA.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HermesId")
                        .HasColumnType("int");

                    b.Property<int?>("MRBId")
                        .HasColumnType("int");

                    b.Property<string>("OrderKey")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PowderBatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowderSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RowDatetime")
                        .HasColumnType("datetime");

                    b.Property<string>("ShortenedKey")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TraysPerSintering")
                        .HasColumnType("int");

                    b.Property<int?>("VisualInspectionFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MRBId")
                        .IsUnique()
                        .HasFilter("[MRBId] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.HasIndex("VisualInspectionFormId")
                        .IsUnique()
                        .HasFilter("[VisualInspectionFormId] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("QA.Domain.Models.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutomaticMeasurement")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DevicePortId")
                        .HasColumnType("int");

                    b.Property<int?>("EdgesQty")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChildParameter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrialParameter")
                        .HasColumnType("bit");

                    b.Property<decimal>("LSL")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("LowerTolerance")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("NominalValue")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterType")
                        .HasColumnType("int");

                    b.Property<string>("SampleClass")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal>("USL")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UpperTolerance")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.HasKey("Id");

                    b.HasIndex("DevicePortId");

                    b.HasIndex("OperationId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("QA.Domain.Models.PowderSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("COMMax")
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("COMMin")
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("COMNominal")
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("DensityMax")
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("DensityMin")
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("DensityNominal")
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("HCJMax")
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("HCJMin")
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("HCJNominal")
                        .HasColumnType("decimal(7,3)");

                    b.Property<int?>("HV30Max")
                        .HasColumnType("int");

                    b.Property<int?>("HV30Min")
                        .HasColumnType("int");

                    b.Property<int?>("HV30Nominal")
                        .HasColumnType("int");

                    b.Property<string>("K1C")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Porosity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PowderType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReleaseRules")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReleaseRulesForSamples")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PowdersSpecifications");
                });

            modelBuilder.Entity("QA.Domain.Models.Pressing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BaloonNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BurringPrassuereCloseValve")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BurringPrassuereOpenValve")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("CounturFilling")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Decopression1A")
                        .HasPrecision(7, 3)
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("Decopression1B")
                        .HasPrecision(7, 3)
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("Decopression2A")
                        .HasPrecision(7, 3)
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("Decopression2B")
                        .HasPrecision(7, 3)
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("DecopressionV1")
                        .HasPrecision(7, 3)
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("DecopressionV2")
                        .HasPrecision(7, 3)
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("Force")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Height1")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Height2")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Height3")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Height4")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("OrderKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PDMNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Powder")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("PrecompactingA")
                        .HasPrecision(7, 3)
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("PrecompactingB")
                        .HasPrecision(7, 3)
                        .HasColumnType("decimal(7,3)");

                    b.Property<string>("PressStrokeRelation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RobotProgam")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RowDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("SuctionFill")
                        .HasColumnType("bit");

                    b.Property<string>("TrayQty")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TrialNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("UCSB")
                        .HasPrecision(7, 3)
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("UPS")
                        .HasPrecision(7, 3)
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("UnderfillStrokeB")
                        .HasPrecision(7, 3)
                        .HasColumnType("decimal(7,3)");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Pressing");
                });

            modelBuilder.Entity("QA.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("InstructionPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPattern")
                        .HasColumnType("bit");

                    b.Property<decimal?>("NarrowingLTol")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<decimal?>("NarrowingUTol")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<string>("PdmNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("SpacerHeight")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.Property<int>("UnitsPerSinteringTray")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("QA.Domain.Models.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Operator")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("OrderKey")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<int>("Series")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ParameterId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("QA.Domain.Models.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("DefectsQty")
                        .HasColumnType("int");

                    b.Property<int?>("GoodsQty")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SampleNumber")
                        .HasColumnType("int");

                    b.Property<int>("SampleQty")
                        .HasColumnType("int");

                    b.Property<int>("VisualInspectionFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisualInspectionFormId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("QA.Domain.Models.SampleDefect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DefectId")
                        .HasColumnType("int");

                    b.Property<string>("DefectSymbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DefectsQty")
                        .HasColumnType("int");

                    b.Property<int>("SampleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefectId");

                    b.HasIndex("SampleId");

                    b.ToTable("SampleDefects");
                });

            modelBuilder.Entity("QA.Domain.Models.SinteringModels.FurnaceLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LevelNo")
                        .HasColumnType("int");

                    b.Property<int>("StackNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FuranceLocalizations");
                });

            modelBuilder.Entity("QA.Domain.Models.SinteringModels.SinteringBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sinterings");
                });

            modelBuilder.Entity("QA.Domain.Models.SinteringModels.TrayLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("ContainsMasterSample")
                        .HasColumnType("bit");

                    b.Property<int>("FuranceLocalizationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmptyTray")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScrapTray")
                        .HasColumnType("bit");

                    b.Property<int>("LevelNo")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowDt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SinteringId")
                        .HasColumnType("int");

                    b.Property<int>("StackNo")
                        .HasColumnType("int");

                    b.Property<string>("TrayCoating")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("FuranceLocalizationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SinteringId");

                    b.ToTable("TrayLocations");
                });

            modelBuilder.Entity("QA.Domain.Models.ToolTests.ComparisonPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ControlPointValue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Parameter")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ToolTestComparisonId")
                        .HasColumnType("int");

                    b.Property<int?>("ToolTestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ToolTestComparisonId");

                    b.HasIndex("ToolTestId");

                    b.ToTable("ComparePoints");
                });

            modelBuilder.Entity("QA.Domain.Models.ToolTests.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tool");
                });

            modelBuilder.Entity("QA.Domain.Models.ToolTests.ToolTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Application")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BatchNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ChipShape")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Chipping")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Coating")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CoatingThickness")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ComparisonId")
                        .HasColumnType("int");

                    b.Property<string>("Cooling")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CuttingDepth")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EdgeWear")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FeedVf")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Feedf")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HolderType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NumberOfPasses")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Other")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PlasticDeformation")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProductSymbol")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SpeedVc")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Substrate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Time")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("VisualDamageDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VisualInspection")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("WorkpieceRoughness")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ae")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ComparisonId");

                    b.ToTable("ToolTests");
                });

            modelBuilder.Entity("QA.Domain.Models.ToolTests.ToolTestComparison", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComparisonParameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Machine")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("TestAim")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TestType")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfMachinning")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WorpieceDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WorpieceHardness")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.ToTable("ToolTestComparisons");
                });

            modelBuilder.Entity("QA.Domain.Models.VisualInspectionForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("InstructionNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("KeyenceIsChecked")
                        .HasColumnType("bit");

                    b.Property<string>("MRBNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("VisualInspectionForms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QA.Domain.Models.ChildParametersAssignement", b =>
                {
                    b.HasOne("QA.Domain.Models.Parameter", "ChildParameter")
                        .WithMany()
                        .HasForeignKey("ChildParameterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QA.Domain.Models.Parameter", "ParentParameter")
                        .WithMany("ChildParametersAssignements")
                        .HasForeignKey("ParentParameterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ChildParameter");

                    b.Navigation("ParentParameter");
                });

            modelBuilder.Entity("QA.Domain.Models.CoatingModels.CoatingMeasurementSeries", b =>
                {
                    b.HasOne("QA.Domain.Models.CoatingModels.CoatingProcess", "CoatingProcess")
                        .WithMany("Measurements")
                        .HasForeignKey("CoatingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoatingProcess");
                });

            modelBuilder.Entity("QA.Domain.Models.Defect", b =>
                {
                    b.HasOne("QA.Domain.Models.DefectCategory", "DefectCategory")
                        .WithMany("Defects")
                        .HasForeignKey("DefectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefectCategory");
                });

            modelBuilder.Entity("QA.Domain.Models.DescriptiveParameter", b =>
                {
                    b.HasOne("QA.Domain.Models.Operation", "Operation")
                        .WithMany("DescriptiveParameters")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("QA.Domain.Models.DevicePort", b =>
                {
                    b.HasOne("QA.Domain.Models.MeasuringDevice", "MeasuringDevice")
                        .WithMany("Ports")
                        .HasForeignKey("MeasuringDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasuringDevice");
                });

            modelBuilder.Entity("QA.Domain.Models.Image", b =>
                {
                    b.HasOne("QA.Domain.Models.ToolTests.ComparisonPoint", "ComparisonPoint")
                        .WithMany("Images")
                        .HasForeignKey("ComparisonPointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QA.Domain.Models.DescriptiveParameter", "DescriptiveParameter")
                        .WithOne("Image")
                        .HasForeignKey("QA.Domain.Models.Image", "DescriptiveParameterId");

                    b.HasOne("QA.Domain.Models.MRB", "MRB")
                        .WithMany("Images")
                        .HasForeignKey("MRBId");

                    b.HasOne("QA.Domain.Models.Marker", "Marker")
                        .WithOne("Image")
                        .HasForeignKey("QA.Domain.Models.Image", "MarkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QA.Domain.Models.Parameter", "Parameter")
                        .WithOne("Image")
                        .HasForeignKey("QA.Domain.Models.Image", "ParameterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QA.Domain.Models.Product", "Product")
                        .WithOne("Image")
                        .HasForeignKey("QA.Domain.Models.Image", "ProductId");

                    b.Navigation("ComparisonPoint");

                    b.Navigation("DescriptiveParameter");

                    b.Navigation("MRB");

                    b.Navigation("Marker");

                    b.Navigation("Parameter");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("QA.Domain.Models.Keyence.KeyenceMeasurement", b =>
                {
                    b.HasOne("QA.Domain.Models.Keyence.KeyenceParameter", "Parameter")
                        .WithMany("Measurements")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("QA.Domain.Models.MRBCorrectiveAction", b =>
                {
                    b.HasOne("QA.Domain.Models.MRB", "MRB")
                        .WithMany("CorrectiveActions")
                        .HasForeignKey("MRBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MRB");
                });

            modelBuilder.Entity("QA.Domain.Models.MRBInstruction", b =>
                {
                    b.HasOne("QA.Domain.Models.MRB", "MRB")
                        .WithOne("Instruction")
                        .HasForeignKey("QA.Domain.Models.MRBInstruction", "MRBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MRB");
                });

            modelBuilder.Entity("QA.Domain.Models.MRBMemberSummary", b =>
                {
                    b.HasOne("QA.Domain.Models.MRB", "MRB")
                        .WithMany("MemberSummary")
                        .HasForeignKey("MRBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MRB");
                });

            modelBuilder.Entity("QA.Domain.Models.Marker", b =>
                {
                    b.HasOne("QA.Domain.Models.Image", null)
                        .WithMany("Markers")
                        .HasForeignKey("ImageId");

                    b.HasOne("QA.Domain.Models.VisualInspectionForm", "VisualInspectionForm")
                        .WithMany("Markers")
                        .HasForeignKey("VisualInspectionFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisualInspectionForm");
                });

            modelBuilder.Entity("QA.Domain.Models.Measurement", b =>
                {
                    b.HasOne("QA.Domain.Models.MeasurementsSeries", "MeasurementsSeries")
                        .WithMany("Measurements")
                        .HasForeignKey("MeasurementSeriesId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QA.Domain.Models.Order", "Order")
                        .WithMany("Measurements")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QA.Domain.Models.Parameter", "Parameter")
                        .WithMany("Measurements")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementsSeries");

                    b.Navigation("Order");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("QA.Domain.Models.MeasurementsSeries", b =>
                {
                    b.HasOne("QA.Domain.Models.Operation", "Operation")
                        .WithMany("MeasurementsSeries")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QA.Domain.Models.Order", "Order")
                        .WithMany("MeasurementsSeries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QA.Domain.Models.SinteringModels.TrayLocation", "TrayLocation")
                        .WithMany("MeasurementsSeries")
                        .HasForeignKey("TrayLocationId");

                    b.Navigation("Operation");

                    b.Navigation("Order");

                    b.Navigation("TrayLocation");
                });

            modelBuilder.Entity("QA.Domain.Models.Operation", b =>
                {
                    b.HasOne("QA.Domain.Models.Product", "Product")
                        .WithMany("Operations")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("QA.Domain.Models.OperationDetails", b =>
                {
                    b.HasOne("QA.Domain.Models.Operation", "Operation")
                        .WithMany("OperationDetails")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("QA.Domain.Models.Order", b =>
                {
                    b.HasOne("QA.Domain.Models.MRB", "MRB")
                        .WithOne("Order")
                        .HasForeignKey("QA.Domain.Models.Order", "MRBId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("QA.Domain.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QA.Domain.Models.VisualInspectionForm", "VisualInspectionForm")
                        .WithOne("Order")
                        .HasForeignKey("QA.Domain.Models.Order", "VisualInspectionFormId");

                    b.Navigation("MRB");

                    b.Navigation("Product");

                    b.Navigation("VisualInspectionForm");
                });

            modelBuilder.Entity("QA.Domain.Models.Parameter", b =>
                {
                    b.HasOne("QA.Domain.Models.DevicePort", "DevicePort")
                        .WithMany("Parameters")
                        .HasForeignKey("DevicePortId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("QA.Domain.Models.Operation", "Operation")
                        .WithMany("Parameters")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DevicePort");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("QA.Domain.Models.Pressing", b =>
                {
                    b.HasOne("QA.Domain.Models.Order", "Order")
                        .WithMany("Pressings")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("QA.Domain.Models.Result", b =>
                {
                    b.HasOne("QA.Domain.Models.Order", "Order")
                        .WithMany("Results")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QA.Domain.Models.DescriptiveParameter", "Parameter")
                        .WithMany("Values")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("QA.Domain.Models.Sample", b =>
                {
                    b.HasOne("QA.Domain.Models.VisualInspectionForm", "VisualInspectionForm")
                        .WithMany("Samples")
                        .HasForeignKey("VisualInspectionFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisualInspectionForm");
                });

            modelBuilder.Entity("QA.Domain.Models.SampleDefect", b =>
                {
                    b.HasOne("QA.Domain.Models.Defect", "Defect")
                        .WithMany()
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QA.Domain.Models.Sample", "Sample")
                        .WithMany("SampleDefects")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Defect");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("QA.Domain.Models.SinteringModels.TrayLocation", b =>
                {
                    b.HasOne("QA.Domain.Models.SinteringModels.FurnaceLocalization", "FuranceLocalization")
                        .WithMany("TrayLocations")
                        .HasForeignKey("FuranceLocalizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QA.Domain.Models.Order", "Order")
                        .WithMany("TrayLocations")
                        .HasForeignKey("OrderId");

                    b.HasOne("QA.Domain.Models.SinteringModels.SinteringBatch", "Sintering")
                        .WithMany("TrayLocations")
                        .HasForeignKey("SinteringId");

                    b.Navigation("FuranceLocalization");

                    b.Navigation("Order");

                    b.Navigation("Sintering");
                });

            modelBuilder.Entity("QA.Domain.Models.ToolTests.ComparisonPoint", b =>
                {
                    b.HasOne("QA.Domain.Models.ToolTests.ToolTestComparison", "ToolTestComparison")
                        .WithMany("ComparisonPoints")
                        .HasForeignKey("ToolTestComparisonId");

                    b.HasOne("QA.Domain.Models.ToolTests.ToolTest", "ToolTest")
                        .WithMany("ComparisonPoints")
                        .HasForeignKey("ToolTestId");

                    b.Navigation("ToolTest");

                    b.Navigation("ToolTestComparison");
                });

            modelBuilder.Entity("QA.Domain.Models.ToolTests.ToolTest", b =>
                {
                    b.HasOne("QA.Domain.Models.ToolTests.ToolTestComparison", "Comparison")
                        .WithMany("ToolTests")
                        .HasForeignKey("ComparisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comparison");
                });

            modelBuilder.Entity("QA.Domain.Models.ToolTests.ToolTestComparison", b =>
                {
                    b.HasOne("QA.Domain.Models.ToolTests.Tool", "Tool")
                        .WithMany("ToolTestComparisons")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("QA.Domain.Models.VisualInspectionForm", b =>
                {
                    b.HasOne("QA.Domain.Models.Image", "Image")
                        .WithMany("VisualInspectionForms")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Image");
                });

            modelBuilder.Entity("QA.Domain.Models.CoatingModels.CoatingProcess", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("QA.Domain.Models.DefectCategory", b =>
                {
                    b.Navigation("Defects");
                });

            modelBuilder.Entity("QA.Domain.Models.DescriptiveParameter", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("QA.Domain.Models.DevicePort", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("QA.Domain.Models.Image", b =>
                {
                    b.Navigation("Markers");

                    b.Navigation("VisualInspectionForms");
                });

            modelBuilder.Entity("QA.Domain.Models.Keyence.KeyenceParameter", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("QA.Domain.Models.MRB", b =>
                {
                    b.Navigation("CorrectiveActions");

                    b.Navigation("Images");

                    b.Navigation("Instruction");

                    b.Navigation("MemberSummary");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("QA.Domain.Models.Marker", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("QA.Domain.Models.MeasurementsSeries", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("QA.Domain.Models.MeasuringDevice", b =>
                {
                    b.Navigation("Ports");
                });

            modelBuilder.Entity("QA.Domain.Models.Operation", b =>
                {
                    b.Navigation("DescriptiveParameters");

                    b.Navigation("MeasurementsSeries");

                    b.Navigation("OperationDetails");

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("QA.Domain.Models.Order", b =>
                {
                    b.Navigation("Measurements");

                    b.Navigation("MeasurementsSeries");

                    b.Navigation("Pressings");

                    b.Navigation("Results");

                    b.Navigation("TrayLocations");
                });

            modelBuilder.Entity("QA.Domain.Models.Parameter", b =>
                {
                    b.Navigation("ChildParametersAssignements");

                    b.Navigation("Image");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("QA.Domain.Models.Product", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Operations");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("QA.Domain.Models.Sample", b =>
                {
                    b.Navigation("SampleDefects");
                });

            modelBuilder.Entity("QA.Domain.Models.SinteringModels.FurnaceLocalization", b =>
                {
                    b.Navigation("TrayLocations");
                });

            modelBuilder.Entity("QA.Domain.Models.SinteringModels.SinteringBatch", b =>
                {
                    b.Navigation("TrayLocations");
                });

            modelBuilder.Entity("QA.Domain.Models.SinteringModels.TrayLocation", b =>
                {
                    b.Navigation("MeasurementsSeries");
                });

            modelBuilder.Entity("QA.Domain.Models.ToolTests.ComparisonPoint", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("QA.Domain.Models.ToolTests.Tool", b =>
                {
                    b.Navigation("ToolTestComparisons");
                });

            modelBuilder.Entity("QA.Domain.Models.ToolTests.ToolTest", b =>
                {
                    b.Navigation("ComparisonPoints");
                });

            modelBuilder.Entity("QA.Domain.Models.ToolTests.ToolTestComparison", b =>
                {
                    b.Navigation("ComparisonPoints");

                    b.Navigation("ToolTests");
                });

            modelBuilder.Entity("QA.Domain.Models.VisualInspectionForm", b =>
                {
                    b.Navigation("Markers");

                    b.Navigation("Order")
                        .IsRequired();

                    b.Navigation("Samples");
                });
#pragma warning restore 612, 618
        }
    }
}
