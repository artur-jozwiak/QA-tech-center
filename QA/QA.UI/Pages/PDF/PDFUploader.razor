@page "/pdf-uploader"
@using Microsoft.AspNetCore.Components.Forms
@using QA.DataAccess
@using QA.Domain.Models
@using QA.UI.Models

@inject IErrorLogger ErrorLogger
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IConfiguration Configuration
@inject QAContext QAContext;

<CascadingAuthenticationState>
    <AuthorizeView Roles="Admin, Manager">
        <div>
            <InputFile OnChange="HandleFileUpload" accept=".pdf" />
            @if (!String.IsNullOrEmpty(_pdfData) && _showSaveButton)
            {
                <button class="btn btn-primary" @onclick="() => SavePDF()">Zapisz</button>
            }
        </div>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Parameter]
    public Product Product { get; set; }
    private bool _showSaveButton = false;
    private string _pdfData;
    private string _pdfFileName;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var pdfFile = e.GetMultipleFiles().FirstOrDefault();

        if (pdfFile != null)
        {
            _pdfFileName = pdfFile.Name;
            try
            {
                var pdfStream = pdfFile.OpenReadStream(maxAllowedSize: 10485760);
                _pdfData = $"data:application/pdf;base64,{Convert.ToBase64String(await ReadStream(pdfStream))}";
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        _showSaveButton = true;
    }

    private async Task<byte[]> ReadStream(Stream input)
    {
        using (MemoryStream ms = new MemoryStream())
        {
            await input.CopyToAsync(ms);
            return ms.ToArray();
        }
    }

    private async Task SavePDF()
    {
        string savePath = Configuration["AppSettings:InstructionsPath"];
        try
        {
            byte[] pdfBytes = Convert.FromBase64String(_pdfData.Split(',')[1]);
            string fullPath = Path.Combine(savePath, _pdfFileName);
            File.WriteAllBytes(fullPath, pdfBytes);
            await AddInstruction(fullPath);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            ErrorLogger.LogError(ex, nameof(PDFUploader));
            throw;
        }
    }

    private async Task AddInstruction(string instructionPath)
    {
        Product.InstructionPath = instructionPath;
        QAContext.Products.Update(Product);
        await QAContext.SaveChangesAsync();
    }
}
