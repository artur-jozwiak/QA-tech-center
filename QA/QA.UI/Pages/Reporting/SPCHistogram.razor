@using Microsoft.EntityFrameworkCore
@using QA.Domain.Models
@using System.Text.Json
@inject IJSRuntime JSRuntime

<div>
    <input class="no-print" type="range" id="binDecimalPlaces" min="0" max="3" value="@_binDecimalPlaces" @oninput="HandelSlider" />
    <canvas id="@("histogram" + Parameter.Id + (UniqueHistogramDesignation != null ? UniqueHistogramDesignation : ""))" width="200" height="200"></canvas>
</div>

@code {
    [Parameter]
    public Parameter Parameter { get; set; }
    [Parameter]
    public List<decimal>? Measurements { get; set; }
    [Parameter]
    public string? UniqueHistogramDesignation { get; set; }

    private bool _firstRender = true;
    private string chartJs;
    private int _binDecimalPlaces = 3;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_firstRender)
        {
            _firstRender = false;
            await UpdateHistogram(Parameter.Id);
        }
    }

    private async Task HandelSlider(ChangeEventArgs e)
    {
        _binDecimalPlaces = int.Parse(e.Value.ToString());
        await UpdateHistogram(Parameter.Id);
    }

    public async Task UpdateHistogram(int parameterId)
    {
        var chartId = "histogram" + parameterId + (UniqueHistogramDesignation != null ? UniqueHistogramDesignation : "");
        // var chartId = "histogram" + parameterId;
        var chartExists = await JSRuntime.InvokeAsync<bool>("eval", $"document.getElementById('{chartId}') !== null");

        if (chartExists)
        {
            await JSRuntime.InvokeVoidAsync("destroyChart", chartId);

            List<decimal> roundedMeasurements = Measurements.Select(m => Math.Round(m, _binDecimalPlaces)).ToList();

            var frequencyData = roundedMeasurements
                .GroupBy(m => m)
                .Select(g => new { Value = g.Key, Count = g.Count() })
                .OrderBy(g => g.Value)
                .ToList();

            var xValues = frequencyData.Select(f => f.Value).ToList();
            var yValues = frequencyData.Select(f => f.Count).ToList();

            var data = new
            {
                labels = xValues,
                datasets = new[]
                {
                    new
                    {
                        label = Parameter.Name,
                        data = yValues,
                        type = "bar",
                        borderColor = "rgba(75, 192, 192, 1)",
                        backgroundColor ="rgba(75, 192, 192, 0.2)",
                        borderWidth = 2,
                        pointRadius = 2,
                        borderDash = new int[] { 0, 0 },
                    },
                }
            };
            //
            decimal nominal = 0;
            if(Parameter.NominalValue != 0)
            {
                nominal = Parameter.NominalValue;
            }
            else
            {
                nominal = (Parameter.LSL + Parameter.USL) / 2;
            }

            //
            chartJs = $@"
            var ctx = document.getElementById('{chartId}').getContext('2d');
            var data = " + JsonSerializer.Serialize(data) + @";
            new Chart(ctx, {
                type: 'bar',
                data: data,
                options: {
            animation: {
                duration: 0,
            },
                    scales: {
                        x: {
                             type: 'linear',
                            grid: {
                                display: true,
                                color: '#e0e0e0',
                                lineWidth: 1,
                                borderDash: [5, 5]
                            },
                        },

                        y: {
                            type: 'linear',
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    },
                    plugins: {
                        annotation: {
                            annotations: [
                                {
                                    type: 'line',
                                    scaleID: 'x',
                                    value: " + JsonSerializer.Serialize(nominal) + @",
                                    // value: " + JsonSerializer.Serialize(Parameter.NominalValue) + @",
                                    borderColor: 'green',
                                    borderWidth: 2,
                                    borderDash: [10, 3],
                                    label: {
                                        enabled: true,
                                        content: '><',
                                        position: 'start'
                                    }
                                },
                                {
                                    type: 'line',
                                    scaleID: 'x',
                                    value: " + JsonSerializer.Serialize(Parameter.LSL) + @",
                                    borderColor: 'red',
                                    borderWidth: 1,
                                    borderDash: [5, 5],
                                    label: {
                                        enabled: true,
                                        content: 'LSL',
                                        position: 'start'
                                    }
                                },
                                {
                                    type: 'line',
                                    scaleID: 'x',
                                    value: " + JsonSerializer.Serialize(Parameter.USL) + @",
                                    borderColor: 'red',
                                    borderWidth: 1,
                                    borderDash: [5, 5],
                                    label: {
                                        enabled: true,
                                        content: 'USL',
                                        position: 'start'
                                    }
                                }
                            ]
                        }
                   }
                }
            });
        ";
            await JSRuntime.InvokeVoidAsync("eval", chartJs);
        }
    }
}




