
@using Microsoft.EntityFrameworkCore
@using QA.BLL.Interfaces
@using QA.DataAccess
@using QA.Domain.Models
@using QA.UI.Pages.Common
@using QA.UI.Pages.Develop
@using QA.UI.Pages.Images

@inject IOperationService OperationService


@if (Parameter != null)
{
    var measurements = OrderId != null
        ? Parameter.Measurements.Where(m => m.OrderId == OrderId)
        : Parameter.Measurements;

    if (!measurements.Any())
    {
        <h4>BRAK DANYCH</h4>
    }
    <div>
        @if (OperationService.IsSandblastingOperation(Parameter.Operation))
        {
            <SPCHistogram Parameter="@Parameter" Measurements="measurements.Select(m => m.Value).ToList()" @ref="_histogram"></SPCHistogram>
            <SPCTable Parameter="@Parameter" Measurements="measurements.Select(m => m.Value).ToList()" @ref="_spcTable"></SPCTable>

            var sides = measurements.Select(m => m.MeasurementsSeries.Side).Distinct();
            foreach (var side in sides)
            {
                var sideMeasurements = measurements.Where(m => m.MeasurementsSeries.Side == side);
                var edges = sideMeasurements.Select(sm => sm.EdgeNo).Distinct();

                foreach (var edge in edges)
                {
                    var edgeMeasurements = sideMeasurements.Where(sm => sm.EdgeNo == edge).Select(sm => sm.Value).ToList();

                    <div style="padding: 10px;
                                 border: 1px solid #ddd;
                                 border-radius: 4px;
                                 text-align: center;">

                        <h5 style="font-weight: bold;
                                   color: #2c3e50;
                                   background-color: #f5f5f5;
                                   padding: 10px 15px;
                                   border-radius: 8px;
                                   box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                            <span style="color: #3498db;">@Parameter.Name</span>
                            Side: <span style="color: #27ae60;">@side</span>
                            Edge: <span style="color: #27ae60;">@edge</span>
                        </h5>

                        <SPCHistogram Parameter="@Parameter" Measurements="edgeMeasurements" UniqueHistogramDesignation="@String.Concat(side,edge)" @ref="_histogram"></SPCHistogram>
                        <SPCTable Parameter="@Parameter" Measurements="edgeMeasurements" @ref="_spcTable"></SPCTable>
                    </div>
                }
            }
        }
        else if (String.IsNullOrEmpty(Trial))
        {
            <SPCHistogram Parameter="@Parameter" Measurements="measurements.Select(m => m.Value).ToList()" @ref="_histogram"></SPCHistogram>
            <SPCTable Parameter="@Parameter" Measurements="measurements.Select(m => m.Value).ToList()" @ref="_spcTable"></SPCTable>
        }
        else
        {
            var trialMeasurements = Parameter.Measurements.Where(m => m.OrderKey == Trial).Select(m => m.Value).ToList();
            <SPCHistogram Parameter="@Parameter" Measurements="trialMeasurements" @ref="_histogram" UniqueHistogramDesignation="@Trial"></SPCHistogram>
            <SPCTable Parameter="@Parameter" Measurements="trialMeasurements" @ref="_spcTable"></SPCTable>
        }
    </div>
}
else
{
    <LoadingSpiner Message="Trwa oblicznie..."></LoadingSpiner>
    <p>Loading...</p>
}

@code {
    [Parameter]
    public Parameter Parameter { get; set; }
    [Parameter]
    public int? OrderId { get; set; }
    [Parameter]
    public string? Trial { get; set; }

    private SPCHistogram _histogram = new();
    private SPCTable _spcTable = new();

    public async Task UpdateChildComponents(int parameterId)
    {
        await _histogram.UpdateHistogram(parameterId);
        await _spcTable.UpdateTable();
    }

    // public void Refresh()
    // {
    //     StateHasChanged();
    // }

//     protected override bool ShouldRender()
//     {
//         StateHasChanged();
//         return true;
//     }
 }
