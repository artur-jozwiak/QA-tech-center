@using System.Text.Json;
@using QA.DataAccess
@using QA.Domain.Models;
@using QA.UI.Models
@inject IJSRuntime JSRuntime
@inject ERPContext ERPContext
@* @inject NavigationManager NavigationManager; *@
@* Może się zdarzyć że zlecenie nie posiada proszku miedzy innymi gdy nie został jesze wydany *@

<canvas id="@Parameter.Name" style="margin: 5px"></canvas>
<h3>@Measurements.Count()</h3>

@code {
    [Parameter]
    public Parameter Parameter { get; set; }
    [Parameter]
    public List<Measurement> Measurements { get; set; }


    private decimal _percentageChartExpansionY = 0.1m;
    private int _daysChartExpansionX = 5;

    private List<MeasurementsGroup> _batchMeasurementsGroups = new();
    private List<dynamic> _datasets = new List<dynamic>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateChart(Parameter.Name, Measurements, Parameter);
        }
    }
   
    public async Task UpdateChart(string chartId, List<Measurement> measurements, Parameter parameter)
    {
        var chartExists = await JSRuntime.InvokeAsync<bool>("eval", $"document.getElementById('{chartId}') !== null");

        Measurements = measurements;
        Parameter = parameter;

        if (chartExists)
        {
            await JSRuntime.InvokeVoidAsync("destroyChart", chartId);

            var yMin = Parameter.LSL - (Parameter.LSL * _percentageChartExpansionY);
            var yMax = Parameter.USL + (Parameter.USL * _percentageChartExpansionY);

            var dateMin = Measurements.Min(m => m.Date).AddDays(-_daysChartExpansionX);
            var dateMax = Measurements.Max(m => m.Date).AddDays(_daysChartExpansionX);
            List<DateTime> timePeriod = new List<DateTime> { dateMin, dateMax };
            var data = new
            {
                    datasets = new[]
                      {
                        new
                        {
                            label = $"LSL[{Parameter.LSL}]",
                            data = timePeriod.Select(m => new
                            {
                                x = m.ToString("yyyy-MM-dd"),
                                y = Parameter.LSL,
                                order = ""
                            }).ToList(),
                            type = "line",
                            borderColor = "rgba(255, 0, 0, 1)",
                            backgroundcolor = "rgba(255, 0, 0, 1)",
                            pointStyle = "line",
                            pointBackgroundColor = "rgba(255, 0, 0, 1)",
                            pointBorderColor = "rgba(255, 0, 0, 1)",
                            borderWidth = 1,
                            pointRadius = 0,
                            borderDash = new int[] { 10, 10 }
                        },

                         new
                        {
                            label = $"USL[{Parameter.USL}]",
                            data = timePeriod.Select(m => new
                            {
                                x = m.ToString("yyyy-MM-dd"),
                                y = Parameter.USL,
                                order =""
                            }).ToList(),
                            type = "line",
                            borderColor = "rgba(255, 0, 0, 1)",
                            backgroundcolor ="rgba(255, 0, 0, 1)",
                            pointStyle = "line",
                            pointBackgroundColor = "rgba(255, 0, 0, 1)",
                            pointBorderColor = "rgba(255, 0, 0, 1)",
                            borderWidth = 1,
                            pointRadius = 0,
                            borderDash = new int[] { 10, 10 },
                        },

                        new
                        {
                            label = $"Nominal[{Parameter.NominalValue}]",
                            data = timePeriod.Select(m => new
                            {
                                x = m.ToString("yyyy-MM-dd"),
                                y = Parameter.NominalValue,
                                order =""
                            }).ToList(),
                            type = "line",
                            borderColor = "rgba(0, 255, 0, 1)",
                            backgroundcolor ="rgba(0, 255, 0, 1)",
                            pointStyle = "line",
                            pointBackgroundColor = "rgba(0, 255, 0, 1)",
                            pointBorderColor = "rgba(0, 255, 0, 1)",
                            borderWidth = 1,
                            pointRadius = 0,
                            borderDash = new int[] { 20, 20 },
                        },


                        new
                        {
                            label = Parameter.Name,
                            data = Measurements.Select(m => new
                            {
                                x = m.Date.ToString("yyyy-MM-dd"),
                                y = m.Value,
                                order = m.OrderKey
                            }).ToList(),
                            type = "line",
                            borderColor = "rgba(75, 192, 192, 1)",
                            backgroundcolor = "rgba(75, 192, 192, 1)",
                            pointStyle = "circle",
                            pointBackgroundColor = "rgba(75, 192, 192, 0.4)",
                            pointBorderColor = "rgba(75, 192, 192, 1",
                            borderWidth = 2,
                            pointRadius = 3,
                            borderDash = new int[] { 0, 0 }
                        },
                }

            };


            var chartJs = @"var canvasId = '" + chartId + @"';
                    console.log('" + chartId + @"')
                 var ctx = document.getElementById(canvasId).getContext('2d');
                 var data = " + JsonSerializer.Serialize(data) + @";
                 var config = {
    type: 'scatter',
    data: data,
    options: {
        plugins: {
            legend: {
                position: 'top',
                labels: {
                    usePointStyle: true,
                    boxWidth: 10,
                    color: '#afa821cc',
                    font: {
                        weight: 'bold',
                    }
                }
            },
            tooltip: {
                callbacks: {
                    label: function(context) {
                        var label = context.dataset.label || '';
                        if (label) {
                            label += ': ';
                        }
                        label += 'Date: ' + context.raw.x + ', Value: ' + context.raw.y + ' ,';
                        label +=  context.raw.order;
                        return label;
                    }
                }
            },
            zoom: {
                zoom: {
                    wheel: {
                        enabled: true,
                    },
                    drag: {
                        enabled: true,
                    },
                    mode: 'xy'
                }
            }
        },
        animation: {
            duration: 0,
        },
        scales: {
            x: {

                type: 'time',
                time: {
                    unit: 'day',
                    tooltipFormat: 'dd MMM yy',
                    displayFormats: {
                        month: 'MMM yy ',
                        day: 'dd MMM yy ',
                        week: 'dd MMM yy ',

                    }
                },

                ticks: {
                    color: '#afa821cc',
                    font: {
                        // weight: 'bold',
                    }
                },
                grid: {
                    display: true,
                    color: 'yellow',
                    lineWidth: 0.1,
                    borderDash: [5, 5]
                }
            },
            y: {

                beginAtZero: false,
                min: " + yMin.ToString("F2", System.Globalization.CultureInfo.InvariantCulture) + @",
                max: " + yMax.ToString("F2", System.Globalization.CultureInfo.InvariantCulture) + @",
                title: {

                    display: true,
                    text: '" + Parameter.Name + @"',
                    color: '#afa821cc',
                    font: {
                        size: 16,
                        // weight: 'bold',
                    }
                },
                ticks: {
                    color: '#afa821cc',

                    font: {
                        weight: 'bold',
                    }
                },
                    grid: {
                    display: true,
                    color: 'yellow',
                    lineWidth: 0.1,
                    borderDash: [0, 0]
                }
            },
        },
    },
};

                 var canvas = document.getElementById(canvasId);
                 canvas.height = 70;
                 // canvas.style.backgroundColor = '#f3f6f4';
                 canvas.style.backgroundColor = '#1e1e1e';
                 new Chart(ctx, config);";

            await JSRuntime.InvokeVoidAsync("eval", chartJs);
            StateHasChanged();
        }
    }


}


