@using Microsoft.EntityFrameworkCore;
@using QA.DataAccess;
@using QA.Domain.Models;
@using QA.Domain.Models.Erp;
@using QA.UI.Models;
@using QA.UI.Pages.Common
@using QA.UI.Services;

@inject IErrorLogger ErrorLogger
@inject ERPContext HermesContext
@inject QAContext QAContext
@inject ERPContext HermesContext
@inject NavigationManager NavigationManager

@if (_showModal)
{
    <div class="modal" style="display: block; width: 20%; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="modal-content col-md-2">
            <div class="modal-header">
                <button class="btn btn-close" @onclick="HideModal"></button>
            </div>
            <EditForm Model="@_product" OnValidSubmit="@SelectCreationMode">
                <ValidationSummary />
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <label for="Symbol">Symbol</label>
                            <InputText class="form-control" id="Symbol" @bind-Value="@_product.Symbol" />
                            <ValidationMessage For="@(() => _product.Symbol)" />
                        </div>

                        <div class="form-group col-md-12">
                            <label for="UpperTolerance">PDM Nr</label>
                            <InputText class="form-control" id="PdmNo" @bind-Value="@_product.PdmNo" />
                            <ValidationMessage For="@(() => _product.PdmNo)" />
                        </div>

                        <div class="form-group col-md-12">
                            <label for="Nazwa">Nazwa</label>
                            <InputText class="form-control" id="Description" @bind-Value="@_product.Description" />
                            <ValidationMessage For="@(() => _product.Description)" />
                        </div>

                        @if (!_isEditMode)
                        {
                            @if (_isLoading)
                            {
                                <LoadingSpiner IsLoading="@_isLoading" Message="@_loadingMessage" />
                            }
                            else
                            {
                                @if (!_createByOperations)
                                {
                                    <div class="form-group col-md-12">
                                        <label for="TechPattern">Technologia</label>
                                        <InputSelect class="form-control" id="TechnologyId" @bind-Value="@_product.TechnologyId">
                                            <option value=""></option>
                                            @foreach (var techPattern in _erpTechPatterns)
                                            {
                                                <option value="@techPattern.Id">@techPattern.SymbolWyr - @techPattern.SymbolTec || @techPattern.Nazwa </option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => _product.TechnologyId)" />
                                    </div>

                                    <div class="form-group col-md-12">
                                        <NavLink class="nav-link">
                                            <span @onclick="() => GetErpOperations()">Operacje</span>
                                        </NavLink>
                                    </div>
                                }
                                else
                                {
                                    <div class="form-group col-md-12">
                                        @foreach (var operation in _product.Operations)
                                        {
                                            <label for="Name">Operacja</label>

                                            <InputSelect class="form-control" id="OpeartionId" TValue="string" @bind-Value="operation.Name">
                                                @foreach (var erpOperation in _erpOperations.OrderBy(o => o.NazwaOp))
                                                {
                                                    <option value="@erpOperation.NazwaOp.Trim()"> @erpOperation.NazwaOp.Trim()</option>
                                                }
                                            </InputSelect>

                                            <ValidationMessage For="@(() => operation.Name)" />
                                        }
                                    </div>

                                    <div class="form-group col-md-12">
                                        <NavLink class="nav-link">
                                            <span @onclick="() => AddOperation()">Dodaj Operacje</span>
                                        </NavLink>
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Zapisz</button>
                    <button type ="button" class="btn btn-secondary" @onclick=HideModal>Anuluj</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [CascadingParameter] 
    public ProductPatterns ProductPatterns { get; set; }

    public List<ErpTechPattern> _erpTechPatterns = new();
    private List<ErpOperation> _erpOperations = new();
    private Product _product = new();
    private Operation _newOperation = new();
    private int _selectedPatternId;
    private string _loadingMessage = String.Empty;
    private bool _isLoading = false;
    public bool _showModal = false;
    private bool _createByOperations = false;
    private bool _isEditMode = false;

    public async Task ShowModal()
    {
        _showModal = true;
        StateHasChanged();

        _isLoading = true;
        _loadingMessage = "Pobieranie technologii...";
        _erpTechPatterns = await HermesContext.ErpTechPatterns.OrderBy(t => t.Id).ToListAsync();
        _isLoading = false;
        StateHasChanged();
    }

    private void HideModal()
    {
        _showModal = false;
        _product = new();
        _isEditMode = false;
    }

    private async Task SelectCreationMode()
    {
        if (!_createByOperations)
        {
            await CreateProductByTechnology();
        }
        await SaveProduct();
    }

    private async Task CreateProductByTechnology()
    {
        List<ErpOperation> selectedErpOperations = new();
        selectedErpOperations = await HermesContext.ErpOperations.Where(o => o.IdTechnolog == _product.TechnologyId).ToListAsync();
        _product.Operations = new List<Operation>();
        foreach (var selectederpOperation in selectedErpOperations)
        {
            Operation operation = new Operation
                {
                    Name = selectederpOperation.NazwaOp.Trim(),
                    Symbol = selectederpOperation.SymbolOp.Trim(),
                    Product = _product,
                    ProductId = _product.Id,
                    TechnologyId = selectederpOperation.IdTechnolog
                };
            _product.Operations.Add(operation);
        }
    }

    private async Task SaveProduct()
    {
        try
        {
            if(_isEditMode)
            {
                UpdateProduct();
            }
            else
            {
                _product.IsPattern = true;
                await AddProduct();
            }

            await Complete();

            HideModal();
            RefreshAncestorComponent();
        }
        catch (Exception ex)
        {
            ErrorLogger.LogError(ex, nameof(PatternCreator));
            throw;
        }
        _product = new();
    }

    public async Task AddProduct()
    {
        await  QAContext.Products.AddAsync(_product);
    }

    private void UpdateProduct()
    {
        QAContext.Products.Update(_product);
    }

    public async Task Complete()
    {
        await QAContext.SaveChangesAsync();
    }

    private async Task GetErpOperations()
    {
        _isLoading = true;
        _loadingMessage = "Pobieranie operacji...";

        _erpOperations = await HermesContext.ErpOperations
       .GroupBy(o => o.NazwaOp)///
       .Select(group => group.First())
       .ToListAsync();
        _isLoading = false;

        _createByOperations = true;
        _product.Operations = new List<Operation>();
        Operation newOperation = new();
        newOperation.ProductId = _product.Id;
        _product.Operations.Add(newOperation);
    }

    private void AddOperation()
    {
        _product.Operations.Add(new Operation());
    }

    public void ShowModalInEditMode(Product product)
    {
        _product = product;
        _isEditMode = true;
        _showModal = true;
        StateHasChanged();
    }

    public void RefreshAncestorComponent()
    {
        if (ProductPatterns != null)
            ProductPatterns.Refresh();
    }
}
